
import Foundation

let end1Points = [348,742 ,494,864 ,193,136 ,342,692 ,234,525 ,72,964 ,639,430 ,398,791 ,181,144 ,607,617 ,98,339 ,763,119 ,450,848 ,293,133 ,308,98 ,157,21 ,792,471 ,42,955 ,895,269 ,629,635 ,169,23 ,250,847 ,709,56 ,938,599 ,913,46 ,844,417 ,178,651 ,226,266 ,654,421 ,368,780 ,183,743 ,942,34 ,987,461 ,485,275 ,33,460 ,606,304 ,755,170 ,342,862 ,866,125 ,795,489 ,905,525 ,99,620 ,899,507 ,627,444 ,798,80 ,580,237 ,947,336 ,491,466 ,335,221 ,547,70 ,520,80 ,835,58 ,574,239 ,219,670 ,512,69 ,83,701 ,874,109 ,980,892 ,154,879 ,782,37 ,481,736 ,377,886 ,777,403 ,728,952 ,495,643 ,425,564 ,443,110 ,529,279 ,985,983 ,145,112 ,914,34 ,409,229 ,719,86 ,929,984 ,985,928 ,168,159 ,189,784 ,401,58 ,47,283 ,246,292 ,869,901 ,879,593 ,707,417 ,99,401 ,583,764 ,493,934 ,643,570 ,278,765 ,940,437 ,812,896 ,727,711 ,173,586 ,169,879 ,361,650 ,725,818 ,48,119 ,921,62 ,135,613 ,702,969 ,306,709 ,117,182 ,608,635 ,448,250 ,635,552 ,528,432 ,711,763 ,43,931 ,980,841 ,279,412 ,334,107 ,164,15 ,708,139 ,323,930 ,256,902 ,586,453 ,21,92 ,282,888 ,278,439 ,110,595 ,95,531 ,800,206 ,396,244 ,334,60 ,640,331 ,757,126 ,430,245 ,160,655 ,502,432 ,434,378 ,907,374 ,548,864 ,616,961 ,116,316 ,78,44 ,873,570 ,202,859 ,449,348 ,143,179 ,478,823 ,790,446 ,34,888 ,630,696 ,350,589 ,803,373 ,490,778 ,487,725 ,794,502 ,136,743 ,572,103 ,488,614 ,18,878 ,889,35 ,436,419 ,422,319 ,176,935 ,398,398 ,327,45 ,643,428 ,743,714 ,203,359 ,346,672 ,263,804 ,93,683 ,19,180 ,47,941 ,525,888 ,624,397 ,382,119 ,972,753 ,682,978 ,639,477 ,545,966 ,275,234 ,912,20 ,54,109 ,242,149 ,664,353 ,117,539 ,794,554 ,828,536 ,746,717 ,540,930 ,862,229 ,492,917 ,960,496 ,148,530 ,415,974 ,694,118 ,672,210 ,548,692 ,891,50 ,639,652 ,579,522 ,231,880 ,443,12 ,562,185 ,619,313 ,371,502 ,969,694 ,943,157 ,821,305 ,782,579 ,378,943 ,315,636 ,544,357 ,51,158 ,151,428 ,818,939 ,99,396 ,602,834 ,974,145 ,327,630 ,858,166 ,537,681 ,672,674 ,544,408 ,84,664 ,204,886 ,475,940 ,868,922 ,987,939 ,854,498 ,863,148 ,565,580 ,231,952 ,935,832 ,631,362 ,405,143 ,807,831 ,450,976 ,488,676 ,170,328 ,626,815 ,217,558 ,598,549 ,824,307 ,539,932 ,542,786 ,735,42 ,677,448 ,929,915 ,870,344 ,187,138 ,729,353 ,919,821 ,272,459 ,599,413 ,919,862 ,229,476 ,438,516 ,914,132 ,905,815 ,766,136 ,548,546 ,836,231 ,484,854 ,736,209 ,751,156 ,659,937 ,74,899 ,843,329 ,793,944 ,67,298 ,43,15 ,633,527 ,782,246 ,30,46 ,473,833 ,903,506 ,85,404 ,944,682 ,420,695 ,560,110 ,246,368 ,399,397 ,452,618 ,467,854 ,77,314 ,523,501 ,67,284 ,88,13 ,173,20 ,667,821 ,384,840 ,270,36 ,311,16 ,736,900 ,613,827 ,41,81 ,408,884 ,380,612 ,82,645 ,934,331 ,634,116 ,942,56 ,441,260 ,925,980 ,317,893 ,362,137 ,434,928 ,819,18 ,185,348 ,895,357 ,742,645 ,522,855 ,867,390 ,95,566 ,887,793 ,351,251 ,309,448 ,190,690 ,383,805 ,140,157 ,685,222 ,192,949 ,856,768 ,337,344 ,919,86 ,137,723 ,33,108 ,195,690 ,136,505 ,509,69 ,255,742 ,650,105 ,985,451 ,68,346 ,472,28 ,660,308 ,341,553 ,430,304 ,333,258 ,853,637 ,881,893 ,552,160 ,728,446 ,529,326 ,564,759 ,533,688 ,445,314 ,935,597 ,955,958 ,178,522 ,124,351 ,265,840 ,771,914 ,72,14 ,970,828 ,631,744 ,765,759 ,260,882 ,676,760 ,680,168 ,466,811 ,566,242 ,768,975 ,391,550 ,781,678 ,731,620 ,973,290 ,838,691 ,294,240 ,390,708 ,521,933 ,358,46 ,431,410 ,833,706 ,13,910 ,619,567 ,165,779 ,21,139 ,921,420 ,629,111 ,654,244 ,982,386 ,252,127 ,144,518 ,581,589 ,927,835 ,859,658 ,110,326 ,149,64 ,651,771 ,788,66 ,710,608 ,927,175 ,957,970 ,350,313 ,115,505 ,414,163 ,874,334 ,441,790 ,66,162 ,839,453 ,63,974 ,51,383 ,343,954 ,726,474 ,449,205 ,855,845 ,28,750 ,272,175 ,428,172 ,824,834 ,25,864 ,66,425 ,456,812 ,286,294 ,400,329 ,888,160 ,879,742 ,893,751 ,621,765 ,162,280 ,96,830 ,646,720 ,367,586 ,298,353 ,813,256 ,559,672 ,951,187 ,868,753 ,91,937 ,112,142 ,936,281 ,95,867 ,421,735 ,830,755 ,355,272 ,309,479 ,951,145 ,513,143 ,491,565 ,797,742 ,581,621 ,132,480 ,140,72 ,524,221 ,694,549 ,689,729 ,27,953 ,913,774 ,669,861 ,454,250 ,863,95 ,341,50 ,863,50 ,73,689 ,944,20 ,22,988 ,798,552 ,935,583 ,462,176 ,739,400 ,441,31 ,628,381 ,545,345 ,91,736 ,825,738 ,541,877 ,750,739 ,873,384 ,597,61 ,518,62 ,623,192 ,163,861 ,748,304 ,375,436 ,146,228 ,808,844 ,174,115 ,598,384 ,932,736 ,772,110 ,298,960 ,744,772 ,605,639 ,126,770 ,13,986 ,756,37 ,132,900 ,806,524 ,84,645 ,329,447 ,684,566 ,747,595 ,293,121 ,42,918 ,32,312 ,42,309 ,332,74 ,699,209 ,297,113 ,515,973 ,774,951 ,471,921 ,297,282 ,477,825 ,220,665 ,483,128]

let end2Points = [620,742, 494,484, 301,136, 342,538, 102,393, 847,189, 99,970, 398,187, 205,168, 416,617, 98,437, 176,119, 450,664, 293,98, 308,15, 405,269, 409,471, 956,41, 895,884, 392,635, 273,127, 250,665, 709,626, 669,868, 458,501, 844,424, 640,189, 149,266, 654,499, 368,38, 497,429, 387,589, 987,348, 330,275, 456,883, 606,628, 755,187, 250,954, 151,840, 599,685, 905,457, 99,339, 699,707, 923,444, 419,459, 580,907, 947,727, 546,411, 458,221, 407,210, 647,80, 835,300, 589,239, 219,22, 255,69, 239,701, 48,935, 159,71, 53,879, 89,730, 481,614, 569,694, 726,454, 728,972, 879,643, 187,326, 386,167, 529,103, 16,14, 877,844, 121,827, 784,229, 479,86, 218,984, 299,242, 168,743, 189,498, 390,58, 452,688, 246,461, 643,675, 108,593, 336,417, 99,502, 583,668, 493,78, 643,990, 600,443, 940,488, 812,594, 25,711, 667,92, 466,582, 361,276, 725,662, 781,852, 921,647, 135,295, 194,461, 274,709, 117,856, 608,854, 448,641, 341,552, 51,432, 987,487, 917,57, 526,387, 377,412, 509,282, 164,345, 708,846, 323,282, 922,236, 244,111, 840,911, 839,331, 712,873, 696,595, 804,531, 800,881, 396,441, 122,60, 640,467, 731,126, 932,245, 753,62, 751,432, 434,287, 552,729, 632,864, 746,831, 666,866, 950,916, 355,570, 885,176, 904,348, 760,796, 478,55, 790,257, 736,888, 437,889, 118,821, 808,373, 818,450, 487,836, 794,114, 136,634, 194,103, 528,614, 539,357, 889,271, 21,419, 422,821, 923,188, 436,436, 820,538, 890,675, 143,114, 189,359, 346,190, 263,249, 93,453, 238,399, 888,100, 236,599, 126,397, 382,981, 336,117, 48,344, 639,408, 12,966, 401,234, 101,20, 809,864, 242,283, 828,353, 26,630, 624,554, 43,536, 746,420, 224,930, 862,212, 835,574, 960,618, 148,485, 494,974, 654,158, 672,81, 668,812, 10,931, 844,652, 556,545, 170,880, 443,775, 562,984, 74,858, 642,231, 714,949, 179,921, 821,427, 874,671, 378,956, 572,893, 315,357, 16,158, 508,428, 90,939, 451,396, 695,834, 974,919, 254,630, 900,166, 564,681, 672,619, 750,614, 210,664, 469,886, 475,592, 614,922, 367,939, 956,498, 22,989, 948,197, 798,385, 113,10, 631,329, 303,143, 891,831, 450,247, 508,676, 636,794, 626,938, 708,558, 532,549, 304,307, 390,932, 435,893, 389,388, 65,448, 29,15, 870,287, 754,138, 508,132, 317,219, 272,72, 342,413, 199,142, 893,476, 150,228, 173,873, 315,815, 766,207, 451,643, 381,231, 852,854, 307,209, 809,156, 659,333, 485,488, 843,584, 910,827, 610,841, 960,932, 912,806, 716,312, 912,928, 473,189, 61,506, 85,898, 944,465, 391,666, 810,360, 25,368, 781,15, 452,340, 890,854, 77,780, 523,646, 637,284, 988,913, 844,691, 722,821, 792,432, 270,352, 311,334, 736,264, 748,962, 885,925, 756,884, 402,634, 82,708, 316,331, 634,891, 942,642, 955,774, 314,369, 577,893, 433,137, 434,623, 819,488, 615,778, 492,357, 742,151, 366,699, 57,390, 389,272, 887,871, 351,30, 865,448, 70,570, 383,607, 140,164, 705,222, 192,358, 856,967, 771,344, 53,952, 887,723, 873,948, 195,184, 136,520, 509,800, 255,740, 650,483, 268,451, 171,346, 574,28, 660,382, 341,419, 807,304, 795,258, 252,36, 237,249, 826,160, 728,905, 529,860, 564,737, 78,233, 329,198, 652,597, 174,177, 178,457, 74,351, 451,654, 771,332, 72,574, 197,55, 631,746, 119,113, 262,882, 61,145, 959,168, 466,745, 566,471, 768,75, 391,591, 771,678, 951,620, 973,664, 835,691, 378,240, 908,190, 963,933, 919,46, 431,297, 330,706, 876,910, 619,398, 165,941, 21,535, 358,420, 608,111, 654,500, 982,841, 144,235, 144,344, 130,138, 882,790, 320,119, 110,168, 917,832, 897,771, 231,623, 370,268, 778,26, 53,66, 350,192, 129,505, 182,163, 532,676, 441,976, 226,162, 310,982, 132,974, 297,137, 262,873, 637,563, 449,279, 722,845, 33,750, 212,235, 710,172, 824,557, 855,34, 84,425, 456,785, 73,294, 525,204, 888,124, 761,742, 858,786, 10,154, 162,889, 646,280, 250,324, 695,258, 566,621, 813,367, 471,672, 234,904, 80,753, 803,225, 18,236, 936,976, 753,209, 833,735, 963,755, 355,70, 309,45, 676,145, 713,143, 988,68, 596,541, 277,317, 101,480, 375,72, 897,594, 179,34, 689,527, 27,32, 913,705, 669,360, 454,344, 13,945, 341,795, 212,50, 143,689, 31,933, 873,137, 798,774, 935,393, 986,176, 972,400, 441,37, 628,339, 615,345, 373,736, 825,687, 541,569, 390,739, 873,665, 385,61, 229,62, 502,192, 732,292, 873,429, 375,655, 146,91, 243,844, 982,923, 598,956, 843,736, 883,110, 852,406, 693,823, 731,639, 732,164, 988,11, 756,164, 984,48, 331,524, 84,195, 939,447, 793,566, 747,181, 430,121, 826,918, 833,312, 42,752, 736,74, 495,209, 297,827, 515,35, 774,290, 919,921, 297,524, 477,343, 351,796, 376,128]

struct Point: Hashable {
    let x: Int
    let y: Int
}

var points = [Point : Int]()
var i = 0
var intersections = 0

//adding coordinates to dict

for i in stride(from: 0, to: end1Points.count, by: 2){
    let end1 = Point(x: end1Points[i], y: end1Points[i+1])
    let end2 = Point(x: end2Points[i], y: end2Points[i+1])

    //only horizontal lines. adding extremities to dict
    if (end1.x == end2.x || end1.y == end2.y){
        points[end1] = points[end1] != nil ? points[end1]! + 1 : 1
        points[end2] = points[end2] != nil ? points[end2]! + 1 : 1
 
        // adding all other intermediate coords to dict

        if end1.x == end2.x{
            if end2.y > end1.y{
                var intermediary = end1.y + 1
                while intermediary < end2.y{
                    let pointInter = Point(x: end1.x, y: intermediary)
                    
                    points[pointInter] = points[pointInter] != nil ? points[pointInter]! + 1 : 1
                    
                     intermediary += 1
                }
            } else if end2.y < end1.y {
                var intermediary = end2.y + 1
                while intermediary < end1.y{
                    let pointInter = Point(x: end1.x, y: intermediary)

                    points[pointInter] = points[pointInter] != nil ? points[pointInter]! + 1 : 1
                    
                     intermediary += 1
                }
            }
        }
        
         else if end1.y == end2.y{
            if end2.x > end1.x{
                var intermediary = end1.x + 1
                while intermediary < end2.x{
                    let pointInter = Point(x: intermediary, y: end1.y)
      
                    points[pointInter] = points[pointInter] != nil ? points[pointInter]! + 1 : 1
                    
                    intermediary += 1
                }
            } else if end2.x < end1.x {
                var intermediary = end2.x + 1
                while intermediary < end1.x{
                    let pointInter = Point(x: intermediary, y: end1.y)
                
                    points[pointInter] = points[pointInter] != nil ? points[pointInter]! + 1 : 1
                    
                   intermediary += 1
                }
            }
        }
    }

}

for value in points.values{
    if value > 1{
        intersections += 1
    }
}
print("Part 1 answer is: \(intersections)")

//4826

//part 2

//now i will add to the points dictionary the diagnal lines

for i in stride(from: 0, to: end1Points.count, by: 2){
    let end1 = Point(x: end1Points[i], y: end1Points[i+1])
    let end2 = Point(x: end2Points[i], y: end2Points[i+1])

    //only diagonal lines. adding extremities to dict
    if ( (end1.x != end2.x) && (end1.y != end2.y) ){
        points[end1] = points[end1] != nil ? points[end1]! + 1 : 1
        points[end2] = points[end2] != nil ? points[end2]! + 1 : 1
 
        // adding all other intermediate coords to dict
        if (end1.x > end2.x && end1.y > end2.y){
            var intermediaryX = end1.x - 1
            var intermediaryY = end1.y - 1
            
            //only one condition for each while is enough, since they are 45 degrees diagonal
            while (intermediaryX > end2.x){
                let pointInter = Point(x: intermediaryX, y: intermediaryY)
            
                points[pointInter] = points[pointInter] != nil ? points[pointInter]! + 1 : 1
                
                intermediaryX -= 1
                intermediaryY -= 1
            }
        }
        
        else if (end1.x > end2.x && end1.y < end2.y){
            var intermediaryX = end1.x - 1
            var intermediaryY = end1.y + 1
            
            while (intermediaryX > end2.x) {
                let pointInter = Point(x: intermediaryX, y: intermediaryY)
            
                points[pointInter] = points[pointInter] != nil ? points[pointInter]! + 1 : 1
                
                intermediaryX -= 1
                intermediaryY += 1
            }
        }
        
        else if (end1.x < end2.x && end1.y > end2.y){
            var intermediaryX = end1.x + 1
            var intermediaryY = end1.y - 1
            
            while (intermediaryX < end2.x) {
                let pointInter = Point(x: intermediaryX, y: intermediaryY)
            
                points[pointInter] = points[pointInter] != nil ? points[pointInter]! + 1 : 1
                
                intermediaryX += 1
                intermediaryY -= 1
            }
        }
    
        else if (end1.x < end2.x && end1.y < end2.y){
            var intermediaryX = end1.x + 1
            var intermediaryY = end1.y + 1
            
            while (intermediaryX < end2.x){
                let pointInter = Point(x: intermediaryX, y: intermediaryY)
            
                points[pointInter] = points[pointInter] != nil ? points[pointInter]! + 1 : 1
                
                intermediaryX += 1
                intermediaryY += 1
            }
        }
    }
}

var intersections2 = 0
for value in points.values{
    if value > 1{
        intersections2 += 1
    }
}
print("Part 2 answer is: \(intersections2)")

//16793
